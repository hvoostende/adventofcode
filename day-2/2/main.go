package main

import (
	"fmt"
	"strings"
)

func main() {
	const input = `DLRRRRLRLDRRRURRURULRLLULUURRRDDLDULDULLUUDLURLURLLDLUUUDUUUULDRDUUDUDDRRLRDDDUDLDLLRUURDRULUULRLRDULULLRLRLRLDRLUULDLDDDDRRLRUUUDDRURRULLLRURLUURULLRLUDDLDRUULDRURULRRRLLLRDLULDRRDDUDLURURLDULDRDRLDDUURRDUDDRDUURDULDUURDUDRDRULDUDUULRRULUUURDUURUDLDURDLRLURUUDRRDLRUDRULRURLDLLDLLRRDRDRLRRRULDRRLDUURLUUDLUUDDLLRULRDUUDURURLUURDRRRUDLRDULRRRLDRDULRUUDDDLRDUULDRLLDRULUULULRDRUUUULULLRLLLRUURUULRRLDDDRULRRRUDURUR
RULRUUUDLLUDURDRDDLLRLLUDRUDDRLRRDLDLDRDULDLULURDLUDDDUULURLDRUUURURLLRRDDDUUDRLRLLDLDRDDDRDUDLRDRDLLLDDLDUDDRUDUUDLLLLLDULRLURRRLLURUUULUDRLRLRLURRDRLLLRLLULRLLLDDLRLRDLUUUUUDULULDDULLUDUURDLRUDLRUDLRLLRLDLULRLDUDRURURDLRULDLULULDLLDLDLDLLLUDUDDLRLRRDULLUDRDDLLLDUURDULUDURLLLDRUDDDLRLULDLDRRDDDRDULDDUDRDDULLULRRLRUULRDUDURUDULUDUDURLDRDUUDDRRLRURDRRLRDDDDRUDLUDLDDLRDLUUDLRRURDDLURDLRDLLRDRDLDLDUUUURULUULDDDDLDULUURRRULUDLLLDRULDRURL
RRRLRDLLDUURDRRRLURDUULUDURDRRUUDURURRLDLLDRDLRRURDDUDDURLRUUDDULULRUUDRLUUDDLLDDDLRRRDLLLLLLRRURDULDLURRURRDDLDDDUDURRDURRRLUDRRULLRULDRLULRULDDRLLRDLRDUURULURLUURLRRULDULULUULDUDLRLDRDDRRRUUULULDUURLRLLURRLURDUUDDDRUULDLLLDRUURLRRLLDDUDRDLDDDULDRDDDUDRRLLLULURDUDLLUUURRLDULURURDDLUDLLRLDRULULURDLDRLURDLRRDRRUULLULDLURRDDUDRDDDLDUDLDRRUDRULDLDULRLLRRRRDDRLUURRRRDDLLRUURRLRURULDDULRLULRURRUULDUUDURDRRLRLUDRULDRUULUUDRDURDURRLULDDDULDDLRDURRUUUUUDDRRDLRDULUUDDL
DRRLLRRLULDDULRDDLRLDRURDDUDULURRDLUUULURRRLLRLULURLLRLLDLLUDDLLRDRURRDLDDURRURDRDDUDDDLLRLDLDLDDDDRRRRUDUDLRDUDDURLLRURRDUDLRLLUDDRLDUUDDLLLUDRRRLLDDULUDDRLLUDDULLDDLRLDLRURRLUDDLULULDLUURDLLUDUDRRRRDULUDLRRLRUDDUUDRRLLRUUDRRLDDLRRRUDRRDRRDDUDLULLURRUURLLLDRDDLUDDDUDDRURURDLRUULLRDRUUDRDUDRLULLDURUUULDDLDRDRUDRUDUULDDRLRDRRDRRRRLRLRUULDDUUDDLLLLRRRDUDLRDLDUDDUURLUDURLDRRRDRUDUDRLDLRLDRDDLUDRURLRDRDLDUDDDLRLULLUULURLDDDULDUDDDLDRLDLURULLUDLLDRULDLLLDUL
LDULURUULLUDLDDRLLDURRULRLURLLURLRRLRDLDDRUURULLRUURUURRUDDDLRRLDDLULDURLLRDURDLLLURLDRULLURLRLDRDRULURDULDLLDUULLLDUDULDURLUDRULRUUUUUUDUUDDDLLURDLDLRLRDLULRDRULUUDRLULLURLRLDURDRRDUDDDURLLUUDRRURUDLDUDRLRLDRLLLLDLLLURRUDDURLDDRULLRRRRDUULDLUDLDRDUUURLDLLLDLRLRRLDDULLRURRRULDLURLURRRRULUURLLUULRURDURURLRRDULLDULLUDURDUDRLUULULDRRDLLDRDRRULLLDDDRDUDLRDLRDDURRLDUDLLRUDRRRUDRURURRRRDRDDRULRRLLDDRRRLDLULRLRRRUDUDULRDLUDRULRRRRLUULRULRLLRLLURDLUURDULRLDLRLURDUURUULUUDRLLUDRULULULLLLRLDLLLDDDLUULUDLLLDDULRDRULURDLLRRDRLUDRD`
	// 	const input = `ULL
	// RRDDD
	// LURDL
	// UUUUD`

	var keypad [][]string
	keypadRow0 := make([]string, 5)
	keypadRow0[0] = ""
	keypadRow0[1] = ""
	keypadRow0[2] = "1"
	keypadRow0[3] = ""
	keypadRow0[4] = ""
	keypad = append(keypad, keypadRow0)

	keypadRow1 := make([]string, 5)
	keypadRow1[0] = ""
	keypadRow1[1] = "2"
	keypadRow1[2] = "3"
	keypadRow1[3] = "4"
	keypadRow1[4] = ""
	keypad = append(keypad, keypadRow1)

	keypadRow2 := make([]string, 5)
	keypadRow2[0] = "5"
	keypadRow2[1] = "6"
	keypadRow2[2] = "7"
	keypadRow2[3] = "8"
	keypadRow2[4] = "9"
	keypad = append(keypad, keypadRow2)

	keypadRow3 := make([]string, 5)
	keypadRow3[0] = ""
	keypadRow3[1] = "A"
	keypadRow3[2] = "B"
	keypadRow3[3] = "C"
	keypadRow3[4] = ""
	keypad = append(keypad, keypadRow3)

	keypadRow4 := make([]string, 5)
	keypadRow4[0] = ""
	keypadRow4[1] = ""
	keypadRow4[2] = "D"
	keypadRow4[3] = ""
	keypadRow4[4] = ""
	keypad = append(keypad, keypadRow4)

	directions := strings.Split(input, "\n")

	var bathroomCode []string
	x, y := 0, 2
	var currentNumber string

	for i, _ := range directions {

		for _, w := range directions[i] {
			currentNumber, x, y = inputDirections(keypad, w, x, y)
			// fmt.Println(currentNumber, string(w), x, y)
		}
		bathroomCode = append(bathroomCode, currentNumber)

	}

	fmt.Println(bathroomCode)

}

func inputDirections(keypad [][]string, direction rune, x, y int) (string, int, int) {
	switch direction {
	case 'U':
		y--
		if y >= 0 {
			if keypad[y][x] != "" {
				return keypad[y][x], x, y
			}
		}
		return keypad[y+1][x], x, y + 1

	case 'R':
		x++
		if x < 5 {
			if keypad[y][x] != "" {
				return keypad[y][x], x, y
			}
		}
		return keypad[y][x-1], x - 1, y

	case 'D':
		y++
		if y < 5 {
			if keypad[y][x] != "" {
				return keypad[y][x], x, y
			}
		}
		return keypad[y-1][x], x, y - 1

	case 'L':
		x--
		if x >= 0 {
			if keypad[y][x] != "" {
				return keypad[y][x], x, y
			}
		}
		return keypad[y][x+1], x + 1, y
	}
	fmt.Println(direction)
	return "false", 0, 0
}
